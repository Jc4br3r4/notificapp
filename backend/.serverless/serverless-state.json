{
  "service": {
    "service": "notificapp-service",
    "serviceObject": {
      "name": "notificapp-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs12.x",
      "stage": "dev",
      "profile": "default",
      "websocketApiRouteSelectionExpression": "$request.body.action",
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "ec2:CreateNetworkInterface",
            "ec2:DescribeNetworkInterfaces",
            "ec2:DeleteNetworkInterface"
          ],
          "Resource": "*"
        }
      ],
      "environment": {
        "NODE_ENV": "production",
        "SECRET": "AIzaSyCS3cfvhW5LKjXE8VgBkWcX5NmfzQzG6_c",
        "APIG_ENDPOINT": {
          "Fn::Join": [
            "",
            [
              {
                "Ref": "WebsocketsApi"
              },
              ".execute-api.",
              {
                "Ref": "AWS::Region"
              },
              ".amazonaws.com/",
              "dev"
            ]
          ]
        }
      },
      "variableSyntax": "\\${([^{}:]+?(?:\\(|:)(?:[^:{}][^{}]*?)?)}",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "IndexLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/notificapp-service-dev-index"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "notificapp-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/notificapp-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/notificapp-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "notificapp-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "IndexLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/notificapp-service/dev/1607987011944-2020-12-14T23:03:31.944Z/index.zip"
              },
              "Handler": "src/serverless.handler",
              "Runtime": "nodejs12.x",
              "FunctionName": "notificapp-service-dev-index",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "NODE_ENV": "production",
                  "SECRET": "AIzaSyCS3cfvhW5LKjXE8VgBkWcX5NmfzQzG6_c",
                  "APIG_ENDPOINT": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"APIG_ENDPOINT\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IndexLogGroup"
            ]
          },
          "IndexLambdaVersion49J8x1zCa9gxr44RXpgld3NiWHkVKoZb7kQHIjhRZY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "IndexLambdaFunction"
              },
              "CodeSha256": "wPEE0E0ZGtUTZOeDc0XeL159Xu6xzRbsPY8k/yTpe1k="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-notificapp-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceProxyVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "{proxy+}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayMethodProxyVarAny": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "ANY",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProxyVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "IndexLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            }
          },
          "ApiGatewayDeployment1607986927029": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodAny",
              "ApiGatewayMethodProxyVarAny"
            ]
          },
          "IndexLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IndexLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-notificapp-service-websockets",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "IndexWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "IndexLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "IndexLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "IndexLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "IndexLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "IndexWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "IndexWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdefaultWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$default",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "IndexWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeployment05Ewhsxipzvgqh6FsaP3GylrVRozAO34BJDADfWHPI"
              }
            }
          },
          "WebsocketsDeployment05Ewhsxipzvgqh6FsaP3GylrVRozAO34BJDADfWHPI": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "SdefaultWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "IndexLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "IndexLambdaVersion49J8x1zCa9gxr44RXpgld3NiWHkVKoZb7kQHIjhRZY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "@hewmen/serverless-plugin-typescript",
      "serverless-plugin-optimize",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "index": {
        "handler": "src/serverless.handler",
        "events": [
          {
            "http": "ANY /"
          },
          {
            "http": "ANY /{proxy+}"
          },
          {
            "websocket": {
              "route": "$connect"
            }
          },
          {
            "websocket": {
              "route": "$disconnect"
            }
          },
          {
            "websocket": {
              "route": "$default"
            }
          }
        ],
        "name": "notificapp-service-dev-index",
        "package": {
          "exclude": [
            "node_modules/serverless-plugin-typescript"
          ],
          "include": [],
          "artifact": "D:\\2020\\wordpress\\notificapp\\backend\\.serverless\\index.zip"
        },
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "IndexLambdaVersion49J8x1zCa9gxr44RXpgld3NiWHkVKoZb7kQHIjhRZY"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "layers": {},
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "excludeDevDependencies": true,
        "exclude": [
          "node_modules/2-thenable",
          "node_modules/@angular-devkit",
          "node_modules/@babel",
          "node_modules/@hewmen",
          "node_modules/@kwsiter",
          "node_modules/@nodelib",
          "node_modules/@protobufjs",
          "node_modules/@schematics",
          "node_modules/@serverless",
          "node_modules/@sindresorhus",
          "node_modules/@szmarczak",
          "node_modules/@tencent-sdk",
          "node_modules/@typescript-eslint",
          "node_modules/@webassemblyjs",
          "node_modules/@xtuc",
          "node_modules/accept",
          "node_modules/acorn*",
          "node_modules/adm-zip",
          "node_modules/agent-base",
          "node_modules/ajv*",
          "node_modules/ammo"
        ],
        "include": [
          "src/serverless",
          "node_modules/@nestjs",
          "node_modules/@nuxtjs",
          "node_modules/@sqltools",
          "node_modules/@types",
          "node_modules/@vendia",
          "node_modules/accepts",
          "node_modules/after",
          "node_modules/ansi-*",
          "node_modules/any-promise",
          "node_modules/append-field",
          "node_modules/app-root-path",
          "node_modules/argparse",
          "node_modules/arraybuffer.slice",
          "node_modules/array-flatten",
          "node_modules/async-limiter",
          "node_modules/aws-*",
          "node_modules/axios",
          "node_modules/backo2",
          "node_modules/balanced-match",
          "node_modules/base64*",
          "node_modules/bcryptjs",
          "node_modules/better-assert",
          "node_modules/binary-case",
          "node_modules/blob",
          "node_modules/body-parser",
          "node_modules/brace-expansion",
          "node_modules/buffer*",
          "node_modules/busboy",
          "node_modules/bytes",
          "node_modules/callsite",
          "node_modules/camelcase",
          "node_modules/chalk",
          "node_modules/class-*",
          "node_modules/cli-*",
          "node_modules/cliui",
          "node_modules/color-*",
          "node_modules/component-*",
          "node_modules/concat-*",
          "node_modules/consola",
          "node_modules/content-*",
          "node_modules/cookie*",
          "node_modules/core-util-is",
          "node_modules/cors",
          "node_modules/d",
          "node_modules/debug",
          "node_modules/decamelize",
          "node_modules/depd",
          "node_modules/destroy",
          "node_modules/dicer",
          "node_modules/dotenv*",
          "node_modules/ecdsa-sig-formatter",
          "node_modules/ee-first",
          "node_modules/emoji-regex",
          "node_modules/encodeurl",
          "node_modules/engine.io*",
          "node_modules/es5-ext",
          "node_modules/es6-*",
          "node_modules/escalade",
          "node_modules/escape-*",
          "node_modules/esprima",
          "node_modules/etag",
          "node_modules/event-emitter",
          "node_modules/express",
          "node_modules/ext",
          "node_modules/fast-safe-stringify",
          "node_modules/figlet",
          "node_modules/finalhandler",
          "node_modules/find-up",
          "node_modules/follow-redirects",
          "node_modules/forwarded",
          "node_modules/fresh",
          "node_modules/fs.realpath",
          "node_modules/get-caller-file",
          "node_modules/glob*",
          "node_modules/google-libphonenumber",
          "node_modules/graceful-fs",
          "node_modules/has-*",
          "node_modules/highlight.js",
          "node_modules/http-errors",
          "node_modules/iconv-lite",
          "node_modules/ieee754",
          "node_modules/indexof",
          "node_modules/inflight",
          "node_modules/inherits",
          "node_modules/ipaddr.js",
          "node_modules/isarray",
          "node_modules/is-*",
          "node_modules/iterare",
          "node_modules/jmespath",
          "node_modules/jsonwebtoken",
          "node_modules/js-yaml",
          "node_modules/jwa",
          "node_modules/jws",
          "node_modules/locale-path",
          "node_modules/lodash*",
          "node_modules/lru-queue",
          "node_modules/media-typer",
          "node_modules/memoizee",
          "node_modules/merge-descriptors",
          "node_modules/methods",
          "node_modules/mime*",
          "node_modules/mini*",
          "node_modules/mkdirp",
          "node_modules/ms",
          "node_modules/multer",
          "node_modules/mz",
          "node_modules/negotiator",
          "node_modules/next-tick",
          "node_modules/node-fetch",
          "node_modules/object-*",
          "node_modules/once",
          "node_modules/on-finished",
          "node_modules/packet-reader",
          "node_modules/parent-require",
          "node_modules/parse5*",
          "node_modules/parseuri",
          "node_modules/path-*",
          "node_modules/pg*",
          "node_modules/p-*",
          "node_modules/postgres-*",
          "node_modules/process-nextick-args",
          "node_modules/proxy-addr",
          "node_modules/p-try",
          "node_modules/qs",
          "node_modules/querystring",
          "node_modules/range-parser",
          "node_modules/raw-body",
          "node_modules/readable-stream",
          "node_modules/reflect-metadata",
          "node_modules/requiere-*",
          "node_modules/rimraf",
          "node_modules/rxjs",
          "node_modules/safe-*",
          "node_modules/sax",
          "node_modules/semver",
          "node_modules/send",
          "node_modules/server-static",
          "node_modules/set-blocking",
          "node_modules/setprototypeof",
          "node_modules/sha.js",
          "node_modules/socket.*",
          "node_modules/split2",
          "node_modules/sprintf-js",
          "node_modules/statuses",
          "node_modules/streamsearch",
          "node_modules/string_*",
          "node_modules/strip-ansi",
          "node_modules/supports-color",
          "node_modules/thenify*",
          "node_modules/timers-ext",
          "node_modules/to-array",
          "node_modules/toidentifier",
          "node_modules/tslib",
          "node_modules/type*",
          "node_modules/unpipe",
          "node_modules/util*",
          "node_modules/uuid",
          "node_modules/validatos",
          "node_modules/vary",
          "node_modules/which-module",
          "node_modules/wrap*",
          "node_modules/ws",
          "node_modules/xml*",
          "node_modules/xtend",
          "node_modules/y18n",
          "node_modules/yarg*",
          "node_modules/yeast"
        ],
        "individually": true,
        "artifactDirectoryName": "serverless/notificapp-service/dev/1607987011944-2020-12-14T23:03:31.944Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/notificapp-service/dev/1607987011944-2020-12-14T23:03:31.944Z",
    "artifact": ""
  }
}